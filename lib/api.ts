import axios from "axios";
import { Note } from "@/types/note";

const TOKEN = process.env.NEXT_PUBLIC_NOTEHUB_TOKEN;
const BASE_URL =
  process.env.NEXT_PUBLIC_API_URL || "https://notehub-public.goit.study/api";

export interface NotesResponse {
  notes: Note[];
  totalPages: number;
}

// ‚úÖ –°–æ–∑–¥–∞–µ–º axios-–∏–Ω—Å—Ç–∞–Ω—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º baseURL
const api = axios.create({
  baseURL: BASE_URL,
});

/**
 * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥—É, –ø–æ–∏—Å–∫—É –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
export const fetchNotes = async ({
  page = 1,
  q,
  tag,
}: {
  page?: number;
  q?: string;
  tag?: string;
} = {}): Promise<NotesResponse> => {
  const params: Record<string, string | number> = { page };

  if (q && q.trim() !== "") params.q = q.trim();
  if (tag && tag.trim() !== "") params.tag = tag.trim();

  const res = await api.get<NotesResponse>("/notes", {
    headers: { Authorization: `Bearer ${TOKEN}` },
    params,
  });

  return res.data;
};

/**
 * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –ø–æ id
 */
export const fetchNoteById = async (id: string): Promise<Note> => {
  console.log("üü° [fetchNoteById] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É —Å ID:", id); // <-- –≤–æ—Ç —ç—Ç–æ—Ç –ª–æ–≥

  const res = await api.get<Note>(`/notes/${id}`, {
    headers: { Authorization: `Bearer ${TOKEN}` },
  });

  console.log("üü¢ [fetchNoteById] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–º–µ—Ç–∫—É:", res.data?.title); // <-- –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

  return res.data;
};

/**
 * ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
 */
export const createNote = async (
  note: Pick<Note, "title" | "content" | "tag">
): Promise<Note> => {
  const res = await api.post<Note>("/notes", note, {
    headers: { Authorization: `Bearer ${TOKEN}` },
  });
  return res.data;
};

/**
 * ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
 */
export const deleteNote = async (id: string): Promise<void> => {
  await api.delete(`/notes/${id}`, {
    headers: { Authorization: `Bearer ${TOKEN}` },
  });
};
